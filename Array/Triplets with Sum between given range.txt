
This problem can easily be solved in linear runtime time using the sliding window sum approach. In this case, we will use a window of size 3. This is also called the 'moving sum algorithm'.
Algorithm

1> Prepare the window of size 3 with the first 3 elements
2> IF (array.len <= 3): CHECK IF window-sum is in the range (1,2), then RETURN accordingly
3> FOR i = 3 UPTO (array.len-1)
3.1> SORT the window (3log3 = constant time operation)
3.2> IF window-sum is in the range (1,2): RETURN 1 or TRUE
3.3> ELSE IF window-sum < 1: Replace the smallest element in the window (window[0]) with array[i]
3.4> ELSE IF window-sum > 2: Replace the largest element in the window (window[2]) with array[i]
4> Outside the loop, check the FINAL window sum and RETURN accordingly.




Solution_code

int sum (vector<string> &win)
{
    double c=0;
    int i,j;
    for (i=0;i<3;i++)
    {
        double numsum=0;
        int pos=0;
        string temp=win[i];
        for (j=0;j<temp.size();j++)
        {
            if (temp[j]!='.')
            {
                numsum=(numsum*10)+((int)temp[j]-48);
            }
            else 
            {
                pos=j;
            }
        }
        numsum=numsum/pow(10.0,temp.size()-pos-1);
        //cout<<numsum<<" ";
        c=c+numsum;
    }
    //cout<<c<<endl;
    if (c<1)
    {
        return 0;
    }
    else if (c>2)
    {
        return 2;
    }
    return 1;
}
int Solution::solve(vector<string> &a) {
    vector <string> win;
    int n=a.size(),i;
    if (n<3)
    return 0;
    for (i=0;i<3;i++)
        win.push_back(a[i]);
    for (i=3;i<n;i++)
    {
        sort(win.begin(),win.end());
        int x=sum(win);
        if (x==1)
            return 1;
        else if (x==0)
        {
            win[0]=a[i];
        }
        else if (x==2)
            win[2]=a[i];
    }
    if (sum(win)==1)
        return 1;
    else 
        return 0;
}
